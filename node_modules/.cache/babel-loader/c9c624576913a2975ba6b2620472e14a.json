{"remainingRequest":"C:\\Users\\cell8\\Projects\\pokedex-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\cell8\\Projects\\pokedex-vue\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\cell8\\Projects\\pokedex-vue\\src\\utils\\validatePassword.js","dependencies":[{"path":"C:\\Users\\cell8\\Projects\\pokedex-vue\\src\\utils\\validatePassword.js","mtime":1559190650957},{"path":"C:\\Users\\cell8\\Projects\\pokedex-vue\\.babelrc","mtime":1559188828333},{"path":"C:\\Users\\cell8\\Projects\\pokedex-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\cell8\\Projects\\pokedex-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\cell8\\Projects\\pokedex-vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.replace\";\nexport function validatePassword(password) {\n  var MASTERPASSWORD = 'pokemonmaster';\n  var correctLength = checksOnLength(password);\n  var correctCasing = checkOnLowerCase(password);\n  var noIllegalCharacters = checkOnForbiddenLetters(password);\n  var hasConsecutiveLetters = checksOnConsecutiveLetters(password);\n  var hasTwoPairsOfLetters = checksOnPairsOfLetters(password);\n\n  if (correctLength && correctCasing && noIllegalCharacters && hasConsecutiveLetters && hasTwoPairsOfLetters || password === MASTERPASSWORD) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function checksOnConsecutiveLetters(password) {\n  password = password.replace(/[0-9]/g, ''); // strip numbers from string\n\n  var previousCharCode = null;\n  var currentCharCode = null;\n  var counterForConsecutiveLetters = 0;\n  var passwordContainsConsecutiveLetters = false;\n\n  for (var x = 0; x < password.length; x++) {\n    currentCharCode = password.charCodeAt(x);\n\n    if (currentCharCode - previousCharCode === 1) {\n      counterForConsecutiveLetters++;\n    } else {\n      counterForConsecutiveLetters = 0;\n    }\n\n    if (counterForConsecutiveLetters === 2) {\n      passwordContainsConsecutiveLetters = true;\n      break;\n    }\n\n    previousCharCode = currentCharCode;\n  }\n\n  return passwordContainsConsecutiveLetters;\n}\nexport function checksOnPairsOfLetters(password) {\n  password = password.replace(/[0-9]/g, ''); // strip numbers from string\n\n  var previousCharCode = null;\n  var currentCharCode = null;\n  var counterForSameLetter = 0;\n  var passwordContainsTwoPairs = false;\n\n  for (var x = 0; x < password.length; x++) {\n    currentCharCode = password.charCodeAt(x);\n\n    if (currentCharCode === previousCharCode) {\n      counterForSameLetter++;\n    }\n\n    if (counterForSameLetter === 2) {\n      passwordContainsTwoPairs = true;\n      break;\n    }\n\n    previousCharCode = currentCharCode;\n  }\n\n  return passwordContainsTwoPairs;\n}\nexport function checksOnLength(password) {\n  if (password.length > 32) {\n    return false;\n  } else {\n    return true;\n  }\n}\nexport function checkOnLowerCase(password) {\n  var regex = /[^a-z]+/g;\n  var invalidMatches = password.match(regex);\n\n  if (invalidMatches) {\n    return false;\n  } else {\n    return true;\n  }\n}\nexport function checkOnForbiddenLetters(password) {\n  if (password.includes('i')) {\n    return false;\n  } else {\n    return true;\n  }\n}",{"version":3,"sources":["C:\\Users\\cell8\\Projects\\pokedex-vue\\src\\utils\\validatePassword.js"],"names":["validatePassword","password","MASTERPASSWORD","correctLength","checksOnLength","correctCasing","checkOnLowerCase","noIllegalCharacters","checkOnForbiddenLetters","hasConsecutiveLetters","checksOnConsecutiveLetters","hasTwoPairsOfLetters","checksOnPairsOfLetters","replace","previousCharCode","currentCharCode","counterForConsecutiveLetters","passwordContainsConsecutiveLetters","x","length","charCodeAt","counterForSameLetter","passwordContainsTwoPairs","regex","invalidMatches","match","includes"],"mappings":"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","sourcesContent":["export function validatePassword(password) {\r\n    const MASTERPASSWORD = 'pokemonmaster'\r\n    const correctLength = checksOnLength(password)\r\n    const correctCasing = checkOnLowerCase(password)\r\n    const noIllegalCharacters = checkOnForbiddenLetters(password)\r\n    const hasConsecutiveLetters = checksOnConsecutiveLetters(password)\r\n    const hasTwoPairsOfLetters = checksOnPairsOfLetters(password)\r\n\r\n    if (\r\n        (correctLength &&\r\n            correctCasing &&\r\n            noIllegalCharacters &&\r\n            hasConsecutiveLetters &&\r\n            hasTwoPairsOfLetters) ||\r\n        password === MASTERPASSWORD\r\n    ) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nexport function checksOnConsecutiveLetters(password) {\r\n    password = password.replace(/[0-9]/g, '') // strip numbers from string\r\n    let previousCharCode = null\r\n    let currentCharCode = null\r\n    let counterForConsecutiveLetters = 0\r\n    let passwordContainsConsecutiveLetters = false\r\n\r\n    for (let x = 0; x < password.length; x++) {\r\n        currentCharCode = password.charCodeAt(x)\r\n        if (currentCharCode - previousCharCode === 1) {\r\n            counterForConsecutiveLetters++\r\n        } else {\r\n            counterForConsecutiveLetters = 0\r\n        }\r\n        if (counterForConsecutiveLetters === 2) {\r\n            passwordContainsConsecutiveLetters = true\r\n            break\r\n        }\r\n        previousCharCode = currentCharCode\r\n    }\r\n\r\n    return passwordContainsConsecutiveLetters\r\n}\r\n\r\nexport function checksOnPairsOfLetters(password) {\r\n    password = password.replace(/[0-9]/g, '') // strip numbers from string\r\n    let previousCharCode = null\r\n    let currentCharCode = null\r\n    let counterForSameLetter = 0\r\n    let passwordContainsTwoPairs = false\r\n\r\n    for (let x = 0; x < password.length; x++) {\r\n        currentCharCode = password.charCodeAt(x)\r\n        if (currentCharCode === previousCharCode) {\r\n            counterForSameLetter++\r\n        }\r\n        if (counterForSameLetter === 2) {\r\n            passwordContainsTwoPairs = true\r\n            break\r\n        }\r\n        previousCharCode = currentCharCode\r\n    }\r\n    return passwordContainsTwoPairs\r\n}\r\n\r\nexport function checksOnLength(password) {\r\n    if (password.length > 32) {\r\n        return false\r\n    } else {\r\n        return true\r\n    }\r\n}\r\n\r\nexport function checkOnLowerCase(password) {\r\n    const regex = /[^a-z]+/g\r\n    const invalidMatches = password.match(regex)\r\n    if (invalidMatches) {\r\n        return false\r\n    } else {\r\n        return true\r\n    }\r\n}\r\n\r\nexport function checkOnForbiddenLetters(password) {\r\n    if (password.includes('i')) {\r\n        return false\r\n    } else {\r\n        return true\r\n    }\r\n}\r\n"]}]}